language: rust
sudo: false
dist: trusty
cache: cargo

# test all relevant Rust versions
rust:
  - nightly
  - beta
  - stable

# this allows you to test different sets of compilation features on all Rust versions
env:
  matrix:
    - FEATURES='--features "feature1"'
    - FEATURES='--features "feature1 feature2"'

matrix:
  include:
    # test with the default set of features on stable
    - rust: stable
      env: FEATURES=''
    - rust: stable
      env: DOC_FEATURES='--features "feature1 feature2" --no-default-features'
      script:
        # checkes that the code is correctly formatted
        - cargo fmt -- --write-mode=diff
        # tries to compile the documentation
        - eval cargo doc --verbose $DOC_FEATURES

# install tools
before_script:
  - export PATH=$HOME/.cargo/bin:$PATH
    # cargo-coveralls measures code coverage and can send it to coveralls.io
  - which cargo-coveralls || cargo install cargo-travis
    # cargo-benchcmp can compare benchmark results between two versions of your code
  - which cargo-benchcmp  || cargo install cargo-benchcmp
    # rustfmt formats your code
  - which rustfmt         || cargo install rustfmt


addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - binutils-dev
      - cmake
    sources:
      - kalakris-cmake

# build and test all rust verion and features combinations
script:
  - eval cargo build --verbose $FEATURES
  - eval cargo test --verbose $FEATURES

after_success: |
  case "$TRAVIS_RUST_VERSION" in
    nightly)
      cargo bench --verbose
      cargo coveralls --verbose
      # check a pull request's effect on performance
      if [ "${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}" != "master" ]; then
        cargo bench > benches-variable
        git fetch
        git checkout master
        cargo bench > benches-control
        cargo benchcmp benches-control benches-variable
      fi
      ;;
    *)
      cargo coveralls --verbose
      ;;
  esac
